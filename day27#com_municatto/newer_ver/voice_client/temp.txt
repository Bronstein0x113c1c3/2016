var name string
	fmt.Print("Press your name: ")
	fmt.Scanln(&name)
	wg.Add(2)

	type chunk struct {
		name string
		ch   string
	}
	data_chan := make(chan chunk)
	defer close(data_chan)
	go func() {
		for {
			data, err := client.Recv()
			if err != nil {
				// close(data_chan)
				stop()
				return
			}
			data_chan <- chunk{name: data.Msg.Name, ch: string(data.Msg.Chunk)}
		}
	}()
	go func() {
		defer wg.Done()
		for {
			select {
			case <-ctx1.Done():
				log.Println("Context receving side called")
				return
			case x, ok := <-data_chan:
				if !ok {
					return
				}
				log.Printf("%v: %v \n", x.name, x.ch)
			}
		}
	}()
	scanner := bufio.NewScanner(os.Stdin)
	go func() {
		defer wg.Done()
		for {
			select {
			case <-ctx2.Done():
				log.Println("Context sending side called")
				return
			default:
				scanner.Scan()
				s := scanner.Text()
				client.Send(&pb.ClientMSG{
					Chunk: []byte(s),
					Name:  name,
				})

			}
		}
	}()
	wg.Wait()
	client.CloseSend()
	log.Println("Exited successfully!!!")