// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	Sending(ctx context.Context, opts ...grpc.CallOption) (App_SendingClient, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) Sending(ctx context.Context, opts ...grpc.CallOption) (App_SendingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_App_serviceDesc.Streams[0], "/App/Sending", opts...)
	if err != nil {
		return nil, err
	}
	x := &appSendingClient{stream}
	return x, nil
}

type App_SendingClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type appSendingClient struct {
	grpc.ClientStream
}

func (x *appSendingClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appSendingClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	Sending(App_SendingServer) error
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) Sending(App_SendingServer) error {
	return status.Errorf(codes.Unimplemented, "method Sending not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s *grpc.Server, srv AppServer) {
	s.RegisterService(&_App_serviceDesc, srv)
}

func _App_Sending_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServer).Sending(&appSendingServer{stream})
}

type App_SendingServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type appSendingServer struct {
	grpc.ServerStream
}

func (x *appSendingServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appSendingServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _App_serviceDesc = grpc.ServiceDesc{
	ServiceName: "App",
	HandlerType: (*AppServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sending",
			Handler:       _App_Sending_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "prototest.proto",
}
