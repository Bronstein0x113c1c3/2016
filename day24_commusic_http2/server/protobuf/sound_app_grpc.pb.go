// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClient interface {
	GetAllSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*AllSong, error)
	PlaySong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (Player_PlaySongClient, error)
}

type playerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClient(cc grpc.ClientConnInterface) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) GetAllSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*AllSong, error) {
	out := new(AllSong)
	err := c.cc.Invoke(ctx, "/Player/GetAllSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) PlaySong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (Player_PlaySongClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[0], "/Player/PlaySong", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerPlaySongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_PlaySongClient interface {
	Recv() (*SongData, error)
	grpc.ClientStream
}

type playerPlaySongClient struct {
	grpc.ClientStream
}

func (x *playerPlaySongClient) Recv() (*SongData, error) {
	m := new(SongData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayerServer is the server API for Player service.
// All implementations must embed UnimplementedPlayerServer
// for forward compatibility
type PlayerServer interface {
	GetAllSong(context.Context, *SongRequest) (*AllSong, error)
	PlaySong(*SongRequest, Player_PlaySongServer) error
	mustEmbedUnimplementedPlayerServer()
}

// UnimplementedPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServer struct {
}

func (UnimplementedPlayerServer) GetAllSong(context.Context, *SongRequest) (*AllSong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSong not implemented")
}
func (UnimplementedPlayerServer) PlaySong(*SongRequest, Player_PlaySongServer) error {
	return status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedPlayerServer) mustEmbedUnimplementedPlayerServer() {}

// UnsafePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServer will
// result in compilation errors.
type UnsafePlayerServer interface {
	mustEmbedUnimplementedPlayerServer()
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_GetAllSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetAllSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Player/GetAllSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetAllSong(ctx, req.(*SongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_PlaySong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).PlaySong(m, &playerPlaySongServer{stream})
}

type Player_PlaySongServer interface {
	Send(*SongData) error
	grpc.ServerStream
}

type playerPlaySongServer struct {
	grpc.ServerStream
}

func (x *playerPlaySongServer) Send(m *SongData) error {
	return x.ServerStream.SendMsg(m)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSong",
			Handler:    _Player_GetAllSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaySong",
			Handler:       _Player_PlaySong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sound_app.proto",
}
