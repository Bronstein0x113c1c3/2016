// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: call.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TheCall_Calling_FullMethodName   = "/TheCall/Calling"
	TheCall_Messaging_FullMethodName = "/TheCall/Messaging"
)

// TheCallClient is the client API for TheCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheCallClient interface {
	Calling(ctx context.Context, opts ...grpc.CallOption) (TheCall_CallingClient, error)
	Messaging(ctx context.Context, opts ...grpc.CallOption) (TheCall_MessagingClient, error)
}

type theCallClient struct {
	cc grpc.ClientConnInterface
}

func NewTheCallClient(cc grpc.ClientConnInterface) TheCallClient {
	return &theCallClient{cc}
}

func (c *theCallClient) Calling(ctx context.Context, opts ...grpc.CallOption) (TheCall_CallingClient, error) {
	stream, err := c.cc.NewStream(ctx, &TheCall_ServiceDesc.Streams[0], TheCall_Calling_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &theCallCallingClient{stream}
	return x, nil
}

type TheCall_CallingClient interface {
	Send(*Client_MSGSound) error
	Recv() (*Server_MSGSound, error)
	grpc.ClientStream
}

type theCallCallingClient struct {
	grpc.ClientStream
}

func (x *theCallCallingClient) Send(m *Client_MSGSound) error {
	return x.ClientStream.SendMsg(m)
}

func (x *theCallCallingClient) Recv() (*Server_MSGSound, error) {
	m := new(Server_MSGSound)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *theCallClient) Messaging(ctx context.Context, opts ...grpc.CallOption) (TheCall_MessagingClient, error) {
	stream, err := c.cc.NewStream(ctx, &TheCall_ServiceDesc.Streams[1], TheCall_Messaging_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &theCallMessagingClient{stream}
	return x, nil
}

type TheCall_MessagingClient interface {
	Send(*Client_MSGText) error
	Recv() (*Client_MSGText, error)
	grpc.ClientStream
}

type theCallMessagingClient struct {
	grpc.ClientStream
}

func (x *theCallMessagingClient) Send(m *Client_MSGText) error {
	return x.ClientStream.SendMsg(m)
}

func (x *theCallMessagingClient) Recv() (*Client_MSGText, error) {
	m := new(Client_MSGText)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TheCallServer is the server API for TheCall service.
// All implementations must embed UnimplementedTheCallServer
// for forward compatibility
type TheCallServer interface {
	Calling(TheCall_CallingServer) error
	Messaging(TheCall_MessagingServer) error
	mustEmbedUnimplementedTheCallServer()
}

// UnimplementedTheCallServer must be embedded to have forward compatible implementations.
type UnimplementedTheCallServer struct {
}

func (UnimplementedTheCallServer) Calling(TheCall_CallingServer) error {
	return status.Errorf(codes.Unimplemented, "method Calling not implemented")
}
func (UnimplementedTheCallServer) Messaging(TheCall_MessagingServer) error {
	return status.Errorf(codes.Unimplemented, "method Messaging not implemented")
}
func (UnimplementedTheCallServer) mustEmbedUnimplementedTheCallServer() {}

// UnsafeTheCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheCallServer will
// result in compilation errors.
type UnsafeTheCallServer interface {
	mustEmbedUnimplementedTheCallServer()
}

func RegisterTheCallServer(s grpc.ServiceRegistrar, srv TheCallServer) {
	s.RegisterService(&TheCall_ServiceDesc, srv)
}

func _TheCall_Calling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TheCallServer).Calling(&theCallCallingServer{stream})
}

type TheCall_CallingServer interface {
	Send(*Server_MSGSound) error
	Recv() (*Client_MSGSound, error)
	grpc.ServerStream
}

type theCallCallingServer struct {
	grpc.ServerStream
}

func (x *theCallCallingServer) Send(m *Server_MSGSound) error {
	return x.ServerStream.SendMsg(m)
}

func (x *theCallCallingServer) Recv() (*Client_MSGSound, error) {
	m := new(Client_MSGSound)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TheCall_Messaging_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TheCallServer).Messaging(&theCallMessagingServer{stream})
}

type TheCall_MessagingServer interface {
	Send(*Client_MSGText) error
	Recv() (*Client_MSGText, error)
	grpc.ServerStream
}

type theCallMessagingServer struct {
	grpc.ServerStream
}

func (x *theCallMessagingServer) Send(m *Client_MSGText) error {
	return x.ServerStream.SendMsg(m)
}

func (x *theCallMessagingServer) Recv() (*Client_MSGText, error) {
	m := new(Client_MSGText)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TheCall_ServiceDesc is the grpc.ServiceDesc for TheCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TheCall",
	HandlerType: (*TheCallServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calling",
			Handler:       _TheCall_Calling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Messaging",
			Handler:       _TheCall_Messaging_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "call.proto",
}
